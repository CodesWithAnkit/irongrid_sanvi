name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    branches: [main]
    types: [completed]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  prepare:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - id: set-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

  deploy-backend:
    needs: prepare
    runs-on: ubuntu-latest
    environment: ${{ needs.prepare.outputs.environment }}
    defaults:
      run:
        working-directory: ./sanvi-backend
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './sanvi-backend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build
    
    - name: Setup deployment configuration
      run: |
        echo "Setting up deployment for ${{ needs.prepare.outputs.environment }}"
        if [ "${{ needs.prepare.outputs.environment }}" = "production" ]; then
          echo "Using production configuration"
          # Production-specific setup here
        else
          echo "Using staging configuration"
          # Staging-specific setup here
        fi
    
    - name: Deploy to ${{ needs.prepare.outputs.environment }}
      run: |
        # Deploy using blue-green strategy
        echo "Starting blue-green deployment for backend"
        echo "1. Provisioning new environment"
        echo "2. Deploying application"
        echo "3. Running health checks"
        echo "4. Switching traffic"
        echo "5. Monitoring for issues"
        
        # Simulate deployment steps
        sleep 2
        echo "Backend deployed successfully to ${{ needs.prepare.outputs.environment }}"
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
        CSRF_SECRET: ${{ secrets.CSRF_SECRET }}

    - name: Run post-deployment tests
      run: |
        echo "Running post-deployment validation tests"
        # Add post-deployment test commands here
        sleep 2
        echo "Post-deployment tests passed"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "Backend deployment to ${{ needs.prepare.outputs.environment }} successful"
        else
          echo "Backend deployment to ${{ needs.prepare.outputs.environment }} failed"
          echo "Initiating rollback procedure..."
          # Add rollback commands here
          echo "Rollback completed"
        fi

  deploy-frontend:
    needs: [prepare, deploy-backend]
    runs-on: ubuntu-latest
    environment: ${{ needs.prepare.outputs.environment }}
    defaults:
      run:
        working-directory: ./sanvi-frontend
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './sanvi-frontend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
    
    - name: Deploy to ${{ needs.prepare.outputs.environment }}
      run: |
        echo "Starting blue-green deployment for frontend"
        echo "1. Provisioning new environment"
        echo "2. Deploying static assets"
        echo "3. Running health checks"
        echo "4. Switching traffic"
        echo "5. Monitoring for issues"
        
        # Simulate deployment steps
        sleep 2
        echo "Frontend deployed successfully to ${{ needs.prepare.outputs.environment }}"
    
    - name: Run post-deployment tests
      run: |
        echo "Running post-deployment validation tests"
        # Add post-deployment test commands here
        sleep 2
        echo "Post-deployment tests passed"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "Frontend deployment to ${{ needs.prepare.outputs.environment }} successful"
        else
          echo "Frontend deployment to ${{ needs.prepare.outputs.environment }} failed"
          echo "Initiating rollback procedure..."
          # Add rollback commands here
          echo "Rollback completed"
        fi
